// Generated by Apple Swift version 1.2 (swiftlang-602.0.53.1 clang-602.0.53)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import UIKit;
@import Foundation;
@import WebKit;
#endif

#import <WildcardSDK/WildcardSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSURL;
@class NSError;


/// Card base class
SWIFT_CLASS("_TtC11WildcardSDK4Card")
@interface Card : NSObject

/// Associated web url for this card
@property (nonatomic, readonly) NSURL * __nonnull webUrl;
@property (nonatomic, readonly, copy) NSString * __nonnull cardType;
@property (nonatomic, readonly) WCCardType type;
+ (WCCardType)cardTypeFromString:(NSString * __null_unspecified)name;
+ (NSString * __nonnull)stringFromCardType:(WCCardType)type;

/// Gets a card from the specified URL
+ (void)getFromUrl:(NSURL * __null_unspecified)url completion:(void (^ __nullable)(Card * __nullable, NSError * __nullable))completion;
- (BOOL)supportsLayout:(WCCardLayout)layout;
@end

@class Creator;
@class NSDate;
@class NSDictionary;


/// Article Card
SWIFT_CLASS("_TtC11WildcardSDK11ArticleCard")
@interface ArticleCard : Card
@property (nonatomic, readonly, copy) NSString * __nonnull title;
@property (nonatomic, readonly) Creator * __nonnull creator;
@property (nonatomic, readonly, copy) NSString * __nullable abstractContent;
@property (nonatomic, readonly, copy) NSArray * __nullable keywords;
@property (nonatomic, readonly, copy) NSString * __nullable html;
@property (nonatomic, readonly) NSDate * __nullable publicationDate;
@property (nonatomic, readonly, copy) NSString * __nullable source;
@property (nonatomic, readonly, copy) NSString * __nullable author;
@property (nonatomic, readonly) NSDate * __nullable updatedDate;
@property (nonatomic, readonly) NSDictionary * __nullable media;
@property (nonatomic, readonly) NSURL * __nullable appLinkIos;
@property (nonatomic, readonly) NSURL * __nullable primaryImageURL;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithTitle:(NSString * __nonnull)title abstractContent:(NSString * __nonnull)abstractContent url:(NSURL * __nonnull)url creator:(Creator * __nonnull)creator data:(NSDictionary * __nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (BOOL)supportsLayout:(WCCardLayout)layout;
@end

@class CardViewElement;


/// The visual source of a CardView.
///
/// Every CardView is associated with a visual source and provides views for various subcomponents. If you choose to completely customize a card, you will have to implement a visual source of your own.
///
/// Each subcomponent of a CardView must extend CardViewElement.
SWIFT_PROTOCOL("_TtP11WildcardSDK20CardViewVisualSource_")
@protocol CardViewVisualSource

/// CardViewElement for the card body
- (CardViewElement * __nonnull)viewForCardBody;
@optional

/// Optional CardViewElement for header
- (CardViewElement * __nullable)viewForCardHeader;

/// Optional CardViewElement for footer
- (CardViewElement * __nullable)viewForCardFooter;

/// Optional CardViewElement for the back of the card. Spans the full card, shown on double tap
- (CardViewElement * __nullable)viewForBackOfCard;
@end



/// DO NOT instantiate. You may derive from this if you are customizing your own visual source.
SWIFT_CLASS("_TtC11WildcardSDK16BaseVisualSource")
@interface BaseVisualSource

/// Initiailize with backing card and card margin to screen bounds
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK30ArticleCardNoImageVisualSource")
@interface ArticleCardNoImageVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (CardViewElement * __nullable)viewForCardFooter;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK28ArticleCardShortVisualSource")
@interface ArticleCardShortVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (CardViewElement * __nullable)viewForCardFooter;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK27ArticleCardTallVisualSource")
@interface ArticleCardTallVisualSource : BaseVisualSource <CardViewVisualSource>
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card aspectRatio:(CGFloat)aspectRatio OBJC_DESIGNATED_INITIALIZER;
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (CardViewElement * __nullable)viewForCardFooter;
@end



@class CardView;
@protocol CardPhysicsDelegate;

SWIFT_CLASS("_TtC11WildcardSDK11CardPhysics")
@interface CardPhysics : NSObject
@property (nonatomic) CardView * __nonnull cardView;
@property (nonatomic) id <CardPhysicsDelegate> __nullable delegate;

/// Adds a pan gesture onto the card view which enables it to be dragged around the screen
@property (nonatomic) BOOL enableDragging;
@end


SWIFT_PROTOCOL("_TtP11WildcardSDK19CardPhysicsDelegate_")
@protocol CardPhysicsDelegate
@optional
- (void)cardViewDragged:(CardView * __nonnull)cardView position:(CGPoint)position;
- (void)cardViewDropped:(CardView * __nonnull)cardView position:(CGPoint)position;
- (void)cardViewTapped:(CardView * __nonnull)cardView;
- (void)cardViewDoubleTapped:(CardView * __nonnull)cardView;
@end

@protocol CardViewDelegate;
@class NSCoder;

SWIFT_CLASS("_TtC11WildcardSDK8CardView")
@interface CardView : UIView

/// See CardPhysics
@property (nonatomic) CardPhysics * __nullable physics;

/// See CardViewDelegate
@property (nonatomic) id <CardViewDelegate> __nullable delegate;

/// The visual source associated with this CardView
@property (nonatomic) id <CardViewVisualSource> __null_unspecified visualSource;

/// The backing card for this CardView
@property (nonatomic) Card * __null_unspecified backingCard;

/// Preferred width for the CardView. When a CardView lays out its subcomponents from a visual source, each subcomponent will also be assigned this preferred width.
///
/// Changing the preferredWidth for the CardView will affect the intrinsic size of the subcomponents and the CardView itself.
@property (nonatomic) CGFloat preferredWidth;

/// Creates a CardView from a card. A layout will be chosen and the CardView will be returned with a default size.
+ (CardView * __nullable)createCardView:(Card * __null_unspecified)card;

/// Creates a CardView from a card with a prechosen layout. The CardView will be returned with a default size.
+ (CardView * __nullable)createCardView:(Card * __null_unspecified)card layout:(WCCardLayout)layout;

/// Creates a CardView from a card with a prechosen layout and width. 
///
/// The card's size will be calculated optimally from the preferredWidth. You may choose various layouts and widths to a get a height that is suitable.
+ (CardView * __nullable)createCardView:(Card * __null_unspecified)card layout:(WCCardLayout)layout preferredWidth:(CGFloat)preferredWidth;

/// Creates a CardView with a customized visual source. See tutorials on how to create your own visual source.
///
/// Passing in UIViewNoIntrinsicMetric for the width will result in a default width calculation based on screen size
+ (CardView * __nullable)createCardView:(Card * __null_unspecified)card visualSource:(id <CardViewVisualSource> __null_unspecified)visualSource preferredWidth:(CGFloat)preferredWidth;

/// ALPHA: Reloads the CardView with a new card. Autogenerates a layout
- (void)reloadWithCard:(Card * __null_unspecified)newCard;

/// ALPHA: Reloads the CardView with a new card and specified layout.
- (void)reloadWithCard:(Card * __null_unspecified)newCard layout:(WCCardLayout)layout;

/// ALPHA: Reloads the CardView with a new card, specified layout, and preferredWidth.
- (void)reloadWithCard:(Card * __null_unspecified)newCard layout:(WCCardLayout)layout preferredWidth:(CGFloat)preferredWidth;

/// ALPHA: Reloads the CardView with a new card, custom visual source, and preferredWidth
- (void)reloadWithCard:(Card * __null_unspecified)newCard visualSource:(id <CardViewVisualSource> __nonnull)visualSource preferredWidth:(CGFloat)preferredWidth;
- (void)fadeOut:(NSTimeInterval)duration delay:(NSTimeInterval)delay completion:(void (^ __nullable)(BOOL))completion;
- (void)fadeIn:(NSTimeInterval)duration delay:(NSTimeInterval)delay completion:(void (^ __nullable)(BOOL))completion;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)awakeFromNib;
- (void)layoutSubviews;
- (CGSize)intrinsicContentSize;
@end


SWIFT_CLASS("_TtC11WildcardSDK14CardViewAction")
@interface CardViewAction

/// Any parameters for the card action. e.g. for a WCCardAction.ViewOnWeb, there is a url parameter
@property (nonatomic, readonly) NSDictionary * __nullable parameters;

/// Action type. See WCCardAction
@property (nonatomic, readonly) WCCardAction type;

/// Init
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithType:(WCCardAction)type parameters:(NSDictionary * __nullable)parameters OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11WildcardSDK16CardViewDelegate_")
@protocol CardViewDelegate
@optional

/// Simply just a hook into UIView.layoutSubviews() for the CardView
- (void)cardViewLayoutSubviews:(CardView * __nonnull)cardView;

/// CardView has been requested to perform a specific action.
- (void)cardViewRequestedAction:(CardView * __nonnull)cardView action:(CardViewAction * __nonnull)action;

/// CardView is about to be reloaded.
- (void)cardViewWillReload:(CardView * __nonnull)cardView;

/// CardView has reloaded.
- (void)cardViewDidReload:(CardView * __nonnull)cardView;
@end



/// The basic subcomponent of a CardView
SWIFT_CLASS("_TtC11WildcardSDK15CardViewElement")
@interface CardViewElement : UIView

/// Reference to the parent CardView of the CardViewElement. Nil if this element has not been added to any CardView yet.
@property (nonatomic) CardView * __nullable cardView;

/// Preferred width for the CardViewElement. Returns UIViewNoIntrinsicMetric if no preferred width is set.
///
/// Similar to UILabel.preferredMaxLayoutWidth, this width and is used in conjunction with optimizedHeight() to determine the intrinsic size of the CardViewElement
@property (nonatomic) CGFloat preferredWidth;

/// Return an optimized height for the CardViewElement based on a given width.
///
/// This function should be overriden to provide a proper intrinsic size for this CardViewElement. This height also affects the intrinsic size of a CardView if this element has been added to one
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;

/// Update the CardViewElement with the given card.
///
/// This always happens before a final layout pass so you should not make any assumptions about frames or sizes during this call.
- (void)update:(Card * __nonnull)card;

/// The preferred width of the card view element has just been updated, make any necessary adjustments
///
/// e.g. Resassign a UILabel's preferredMaxLayoutWidth if it depends on the CardViewElement's preferredWidth
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (CGSize)intrinsicContentSize;

/// Called automatically on init() or awakeFromNib()
- (void)initialize;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@end


SWIFT_CLASS("_TtC11WildcardSDK22CardViewElementFactory")
@interface CardViewElementFactory

/// Creates a CardViewElement from WCElementType. You may not make any assumptions about the size after this call.
///
/// Use only for initialization
+ (CardViewElement * __nonnull)createCardViewElement:(WCElementType)type;
@end




/// Creator of a Card
///
/// Any entity that owns Card content. This may be a company, specific website, or individual.
SWIFT_CLASS("_TtC11WildcardSDK7Creator")
@interface Creator
@property (nonatomic, readonly, copy) NSString * __nonnull name;
@property (nonatomic, readonly) NSURL * __nonnull url;
@property (nonatomic, readonly) NSURL * __nullable favicon;
@property (nonatomic, readonly) NSURL * __nullable iosAppStoreUrl;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithName:(NSString * __nonnull)name url:(NSURL * __nonnull)url favicon:(NSURL * __nullable)favicon iosStore:(NSURL * __nullable)iosStore OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;

SWIFT_CLASS("_TtC11WildcardSDK14FullCardHeader")
@interface FullCardHeader : CardViewElement

/// Use this to change the vertical spacing between the kicker and title
@property (nonatomic) CGFloat kickerSpacing;

/// Content insets of card card content
@property (nonatomic) UIEdgeInsets contentEdgeInset;
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified kicker;
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified title;
@property (nonatomic) UIView * __null_unspecified hairline;
- (void)initialize;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)update:(Card * __nonnull)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class WCImageView;

SWIFT_PROTOCOL("_TtP11WildcardSDK19WCImageViewDelegate_")
@protocol WCImageViewDelegate
@optional
- (void)imageViewTapped:(WCImageView * __nonnull)imageView;
@end



/// Card Body with an image and a caption under it.
SWIFT_CLASS("_TtC11WildcardSDK19ImageAndCaptionBody")
@interface ImageAndCaptionBody : CardViewElement <WCImageViewDelegate>
@property (nonatomic, weak) IBOutlet WCImageView * __null_unspecified imageView;
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified caption;

/// Adjusts the aspect ratio of the image view.
@property (nonatomic) CGFloat imageAspectRatio;

/// Content inset for image view and caption
@property (nonatomic) UIEdgeInsets contentEdgeInset;

/// Controls the spacing between the caption and the image
@property (nonatomic) CGFloat captionSpacing;
- (void)initialize;
- (void)update:(Card * __nonnull)card;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (CGSize)intrinsicContentSize;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)imageViewTapped:(WCImageView * __nonnull)imageView;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end



/// Image Card
SWIFT_CLASS("_TtC11WildcardSDK9ImageCard")
@interface ImageCard : Card
@property (nonatomic, readonly) Creator * __nonnull creator;
@property (nonatomic, readonly) NSURL * __nonnull imageUrl;

/// optional size for the image. will be (-1,-1) if size is unavailable
@property (nonatomic, readonly) CGSize imageSize;
@property (nonatomic, readonly, copy) NSString * __nullable title;
@property (nonatomic, readonly, copy) NSString * __nullable imageCaption;
@property (nonatomic, readonly, copy) NSArray * __nullable keywords;
@property (nonatomic, readonly) NSURL * __nullable appLinkIos;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithImageUrl:(NSURL * __nonnull)imageUrl url:(NSURL * __nonnull)url creator:(Creator * __nonnull)creator data:(NSDictionary * __nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (BOOL)supportsLayout:(WCCardLayout)layout;
@end


SWIFT_CLASS("_TtC11WildcardSDK30ImageCardImageOnlyVisualSource")
@interface ImageCardImageOnlyVisualSource : BaseVisualSource <CardViewVisualSource>
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card aspectRatio:(CGFloat)aspectRatio OBJC_DESIGNATED_INITIALIZER;
- (CardViewElement * __nonnull)viewForCardBody;
@end


SWIFT_CLASS("_TtC11WildcardSDK25ImageCardTallVisualSource")
@interface ImageCardTallVisualSource : BaseVisualSource <CardViewVisualSource>
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card aspectRatio:(CGFloat)aspectRatio OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
@end


SWIFT_CLASS("_TtC11WildcardSDK18ImageFloatLeftBody")
@interface ImageFloatLeftBody : CardViewElement <WCImageViewDelegate>
@property (nonatomic, weak) IBOutlet WCImageView * __null_unspecified imageView;
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified descriptionLabel;

/// Content inset for all content of card body
@property (nonatomic) UIEdgeInsets contentEdgeInset;

/// Set this variable to control the image size. Do not attempt to reframe or relayout the imageView itself
@property (nonatomic) CGSize imageViewSize;
- (void)initialize;
- (void)update:(Card * __nonnull)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)imageViewTapped:(WCImageView * __nonnull)imageView;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK19ImageFloatRightBody")
@interface ImageFloatRightBody : CardViewElement <WCImageViewDelegate>
@property (nonatomic, weak) IBOutlet WCImageView * __null_unspecified imageView;
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified descriptionLabel;

/// Content inset for all content of card body
@property (nonatomic) UIEdgeInsets contentEdgeInset;

/// Set this variable to control the image size. Do not attempt to reframe or relayout the imageView itself
@property (nonatomic) CGSize imageViewSize;
- (void)initialize;
- (void)update:(Card * __nonnull)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)imageViewTapped:(WCImageView * __nonnull)imageView;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK13ImageOnlyBody")
@interface ImageOnlyBody : CardViewElement <WCImageViewDelegate>
@property (nonatomic) WCImageView * __null_unspecified imageView;

/// Adjusts the aspect ratio of the image view.
@property (nonatomic) CGFloat imageAspectRatio;

/// Content insets
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)update:(Card * __nonnull)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)imageViewTapped:(WCImageView * __nonnull)imageView;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end



/// ALPHA: The visual source of a maximized CardView
///
/// The maximized visual source should always be used with the extension UIView.maximizeCardView. This visual source is responsible for displaying a Card during its 'maximized state'. In this state, the Card takes up the entire application frame, and is owned by a fully presented view controller.
///
/// This visual source may never be used for an inline card. The size is always determined relative to the application frame using applicationFrameEdgeInsets
SWIFT_PROTOCOL("_TtP11WildcardSDK29MaximizedCardViewVisualSource_")
@protocol MaximizedCardViewVisualSource <CardViewVisualSource>

/// This represents the edge insets of the maximized CardView to the application frame.
///
/// This is essentially how inset the CardView is from the screen
- (UIEdgeInsets)applicationFrameEdgeInsets;
@end


SWIFT_CLASS("_TtC11WildcardSDK28MaximizedArticleVisualSource")
@interface MaximizedArticleVisualSource <MaximizedCardViewVisualSource>
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
- (UIEdgeInsets)applicationFrameEdgeInsets;
- (CardViewElement * __nonnull)viewForCardBody;
@end


@class UIWebView;
@class NSURLRequest;

SWIFT_CLASS("_TtC11WildcardSDK20MediaTextFullWebView")
@interface MediaTextFullWebView : CardViewElement <UIWebViewDelegate>
- (void)initialize;
- (void)update:(Card * __nonnull)card;
- (BOOL)webView:(UIWebView * __nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * __nonnull)request navigationType:(UIWebViewNavigationType)navigationType;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSBundle (SWIFT_EXTENSION(WildcardSDK))

/// Gets a reference to the WildcardSDK Bundle
+ (NSBundle * __nonnull)wildcardSDKBundle;
@end


@interface NSMutableAttributedString (SWIFT_EXTENSION(WildcardSDK))
@end


@interface NSURL (SWIFT_EXTENSION(WildcardSDK))
- (BOOL)isTwitterProfileURL;
- (BOOL)isTwitterTweetURL;
@end

@class UIButton;

SWIFT_CLASS("_TtC11WildcardSDK14ReadMoreFooter")
@interface ReadMoreFooter : CardViewElement

/// Read More Button. Always left aligned at the moment.
@property (nonatomic) UIButton * __null_unspecified readMoreButton;

/// Content insets. Right inset for this element does nothing at the moment.
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end



/// Most basic card body consisting of just a paragraph label
SWIFT_CLASS("_TtC11WildcardSDK23SingleParagraphCardBody")
@interface SingleParagraphCardBody : CardViewElement
@property (nonatomic) UILabel * __null_unspecified paragraphLabel;
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)update:(Card * __nonnull)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end



/// Summary Card
SWIFT_CLASS("_TtC11WildcardSDK11SummaryCard")
@interface SummaryCard : Card
@property (nonatomic, readonly, copy) NSString * __nonnull title;
@property (nonatomic, readonly, copy) NSString * __nonnull abstractContent;
@property (nonatomic, readonly, copy) NSString * __nullable subtitle;
@property (nonatomic, readonly) NSDictionary * __nullable media;
@property (nonatomic, readonly) NSURL * __nullable primaryImageURL;
@property (nonatomic, readonly) NSURL * __nullable appLinkIos;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithUrl:(NSURL * __nonnull)url description:(NSString * __nonnull)description title:(NSString * __nonnull)title media:(NSDictionary * __nullable)media data:(NSDictionary * __nullable)data OBJC_DESIGNATED_INITIALIZER;
- (BOOL)supportsLayout:(WCCardLayout)layout;
@end


SWIFT_CLASS("_TtC11WildcardSDK32SummaryCardImageOnlyVisualSource")
@interface SummaryCardImageOnlyVisualSource : BaseVisualSource <CardViewVisualSource>
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card aspectRatio:(CGFloat)aspectRatio OBJC_DESIGNATED_INITIALIZER;
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (CardViewElement * __nullable)viewForCardFooter;
@end


SWIFT_CLASS("_TtC11WildcardSDK30SummaryCardNoImageVisualSource")
@interface SummaryCardNoImageVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (CardViewElement * __nullable)viewForCardFooter;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK32SummaryCardShortLeftVisualSource")
@interface SummaryCardShortLeftVisualSource : BaseVisualSource <CardViewVisualSource>
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (CardViewElement * __nullable)viewForCardFooter;
@end


SWIFT_CLASS("_TtC11WildcardSDK28SummaryCardShortVisualSource")
@interface SummaryCardShortVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (CardViewElement * __nullable)viewForCardFooter;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK27SummaryCardTallVisualSource")
@interface SummaryCardTallVisualSource : BaseVisualSource <CardViewVisualSource>
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card aspectRatio:(CGFloat)aspectRatio OBJC_DESIGNATED_INITIALIZER;
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (CardViewElement * __nullable)viewForCardFooter;
@end


SWIFT_CLASS("_TtC11WildcardSDK37SummaryCardTwitterProfileVisualSource")
@interface SummaryCardTwitterProfileVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (CardViewElement * __nullable)viewForCardFooter;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK35SummaryCardTwitterTweetVisualSource")
@interface SummaryCardTwitterTweetVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK13TwitterHeader")
@interface TwitterHeader : CardViewElement

/// Content insets of card card content
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (void)update:(Card * __nonnull)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIButton (SWIFT_EXTENSION(WildcardSDK))
@end


@interface UIColor (SWIFT_EXTENSION(WildcardSDK))
+ (UIColor * __nonnull)wildcardDarkBlue;
+ (UIColor * __nonnull)wildcardLightBlue;
+ (UIColor * __nonnull)wildcardMediumGray;
+ (UIColor * __nonnull)wildcardBackgroundGray;
+ (UIColor * __nonnull)wildcardMediaBodyColor;
+ (UIColor * __nonnull)twitterBlue;
@end


@interface UIFont (SWIFT_EXTENSION(WildcardSDK))
@end


@interface UIImage (SWIFT_EXTENSION(WildcardSDK))
@end


@interface UILabel (SWIFT_EXTENSION(WildcardSDK))
@end

@class NSLayoutConstraint;
@class UIViewController;

@interface UIView (SWIFT_EXTENSION(WildcardSDK))
+ (UIView * __nullable)loadFromNibNamed:(NSString * __nonnull)nibNamed;

/// For any view with a superview, constrain all edges flush with superview. e.g. Leading, Top, Bottom, Right all 0
- (void)constrainToSuperViewEdges;

/// Given a reference view, constrain this view to be exactly the same size and position (Useful for overlays that aren't child views). Superviews must be the same
- (void)constrainExactlyToView:(UIView * __nonnull)view;

/// Given a reference view, align left. Superviews must be the same.
- (void)alignLeftToView:(UIView * __nonnull)view;

/// Given a reference view, align right. Superviews must be the same.
- (void)alignRightToView:(UIView * __nonnull)view;

/// Given a reference view, align top. Superviews must be the same.
- (void)alignTopToView:(UIView * __nonnull)view;

/// Given a reference view, align bottom. Superviews must be the same.
- (void)alignBottomToView:(UIView * __nonnull)view;
- (NSLayoutConstraint * __nonnull)constrainLeftToSuperView:(CGFloat)offset;
- (NSLayoutConstraint * __nonnull)constrainRightToSuperView:(CGFloat)offset;
- (NSLayoutConstraint * __nonnull)constrainTopToSuperView:(CGFloat)offset;
- (NSLayoutConstraint * __nonnull)constrainBottomToSuperView:(CGFloat)offset;
- (NSLayoutConstraint * __nonnull)verticallyCenterToSuperView:(CGFloat)offset;
- (NSLayoutConstraint * __nonnull)horizontallyCenterToSuperView:(CGFloat)offset;
- (NSLayoutConstraint * __nonnull)constrainHeight:(CGFloat)height;
- (NSLayoutConstraint * __nonnull)constrainWidth:(CGFloat)width;
- (void)constrainWidth:(CGFloat)width height:(CGFloat)height;
- (UIView * __nonnull)addBlurOverlay:(UIBlurEffectStyle)style;
- (BOOL)hasSuperview;
- (UIViewController * __nullable)parentViewController;

/// Adds a bottom border with specified width and color
- (UIView * __nonnull)addBottomBorderWithWidth:(CGFloat)width color:(UIColor * __nonnull)color;

/// Adds a left border with specified width and color
- (UIView * __nonnull)addLeftBorderWithWidth:(CGFloat)width color:(UIColor * __nonnull)color;

/// Adds a right border with specified width and color
- (UIView * __nonnull)addRightBorderWithWidth:(CGFloat)width color:(UIColor * __nonnull)color;

/// Adds a top border with specified width and color
- (UIView * __nonnull)addTopBorderWithWidth:(CGFloat)width color:(UIColor * __nonnull)color;
@end


@interface UIViewController (SWIFT_EXTENSION(WildcardSDK))

/// Presents a Card with a best-fit layout
- (void)presentCard:(Card * __null_unspecified)card animated:(BOOL)animated completion:(void (^ __nullable)(void))completion;

/// Presents a Card with a specific layout
- (void)presentCard:(Card * __null_unspecified)card layout:(WCCardLayout)layout animated:(BOOL)animated completion:(void (^ __nullable)(void))completion;

/// Presents a Card with a custom visual source
- (void)presentCard:(Card * __null_unspecified)card customVisualSource:(id <CardViewVisualSource> __nonnull)customVisualSource animated:(BOOL)animated completion:(void (^ __nullable)(void))completion;

/// Default handling of various Card Actions by a UIViewController. Includes presenting share sheets, appstore sheets, etc.
///
/// It is recommended you use this UIViewController extension/category to handle card actions. If a UIViewController is a CardViewDelegate, you can use this function directly in cardViewRequestedAction. This is essential to making the buttons on your cards responsive.
- (void)handleCardAction:(CardView * __nonnull)cardView action:(CardViewAction * __nonnull)action;

/// ALPHA: Maximizes a CardView with a customized visual source
- (void)maximizeCardView:(CardView * __nonnull)cardView maximizedVisualSource:(id <MaximizedCardViewVisualSource> __nonnull)maximizedVisualSource;
@end



/// Video Card
SWIFT_CLASS("_TtC11WildcardSDK9VideoCard")
@interface VideoCard : Card
@property (nonatomic, readonly, copy) NSString * __nonnull title;
@property (nonatomic, readonly) Creator * __nonnull creator;
@property (nonatomic, readonly) NSURL * __nonnull embedUrl;
@property (nonatomic, readonly, copy) NSString * __nullable abstractContent;
@property (nonatomic, readonly, copy) NSArray * __nullable keywords;
@property (nonatomic, readonly) NSURL * __nullable appLinkIos;
@property (nonatomic, readonly) NSURL * __nullable streamUrl;
@property (nonatomic, readonly, copy) NSString * __nullable streamContentType;
@property (nonatomic, readonly) NSURL * __nullable posterImageUrl;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithTitle:(NSString * __nonnull)title embedUrl:(NSURL * __nonnull)embedUrl url:(NSURL * __nonnull)url creator:(Creator * __nonnull)creator data:(NSDictionary * __nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isYoutube;
- (BOOL)isVimeo;
- (NSString * __nullable)getYoutubeId;
- (BOOL)supportsLayout:(WCCardLayout)layout;
@end

@class WCVideoView;

SWIFT_PROTOCOL("_TtP11WildcardSDK19WCVideoViewDelegate_")
@protocol WCVideoViewDelegate
@optional
- (void)videoViewDidStartPlaying:(WCVideoView * __nonnull)videoView;
- (void)videoViewWillEndPlaying:(WCVideoView * __nonnull)videoView;
- (void)videoViewTapped:(WCVideoView * __nonnull)videoView;
@end



/// A Card Body which can play various Video Cards
SWIFT_CLASS("_TtC11WildcardSDK13VideoCardBody")
@interface VideoCardBody : CardViewElement <WCVideoViewDelegate>
@property (nonatomic) WCVideoView * __null_unspecified videoView;

/// Adjusts the aspect ratio of the video
@property (nonatomic) CGFloat videoAspectRatio;

/// Content insets
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)update:(Card * __nonnull)card;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)videoViewTapped:(WCVideoView * __nonnull)videoView;
- (void)videoViewDidStartPlaying:(WCVideoView * __nonnull)videoView;
- (void)videoViewWillEndPlaying:(WCVideoView * __nonnull)videoView;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK30VideoCardShortFullVisualSource")
@interface VideoCardShortFullVisualSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK25VideoCardShortImageSource")
@interface VideoCardShortImageSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement * __nullable)viewForCardHeader;
- (CardViewElement * __nonnull)viewForCardBody;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK18VideoCardThumbnail")
@interface VideoCardThumbnail : CardViewElement <WCVideoViewDelegate>
@property (nonatomic) WCVideoView * __null_unspecified videoView;
@property (nonatomic) UILabel * __null_unspecified title;
@property (nonatomic) UILabel * __null_unspecified kicker;

/// Content insets
@property (nonatomic) UIEdgeInsets contentEdgeInset;

/// Use this to change the vertical spacing between the kicker and title
@property (nonatomic) CGFloat kickerSpacing;

/// Use this to change the horizontal padding between the label and the video view
@property (nonatomic) CGFloat labelToVideoPadding;
- (void)initialize;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (void)update:(Card * __nonnull)card;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (void)videoViewTapped:(WCVideoView * __nonnull)videoView;
- (void)videoViewDidStartPlaying:(WCVideoView * __nonnull)videoView;
- (void)videoViewWillEndPlaying:(WCVideoView * __nonnull)videoView;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK29VideoCardThumbnailImageSource")
@interface VideoCardThumbnailImageSource : BaseVisualSource <CardViewVisualSource>
- (CardViewElement * __nonnull)viewForCardBody;
- (CardViewElement * __nullable)viewForBackOfCard;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCard:(Card * __nonnull)card OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WildcardSDK19ViewOnWebCardFooter")
@interface ViewOnWebCardFooter : CardViewElement
@property (nonatomic) UIButton * __null_unspecified viewOnWebButton;
@property (nonatomic) UIButton * __null_unspecified shareButton;
@property (nonatomic) UIView * __null_unspecified hairline;
@property (nonatomic) UIEdgeInsets contentEdgeInset;
- (void)initialize;
- (void)adjustForPreferredWidth:(CGFloat)cardWidth;
- (CGFloat)optimizedHeight:(CGFloat)cardWidth;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end



/// Wildcard Extension of UIImageView with a few extra functions
SWIFT_CLASS("_TtC11WildcardSDK11WCImageView")
@interface WCImageView : UIImageView

/// Default cross fade animation duration when setting an image
@property (nonatomic) NSTimeInterval crossFadeDuration;

/// Set image to URL and automatically set the image
- (void)setImageWithURL:(NSURL * __nonnull)url mode:(UIViewContentMode)mode;

/// See WCImageViewDelegate
@property (nonatomic) id <WCImageViewDelegate> __nullable delegate;

/// Set image to URL with a completion block. If the completion block is nil, this function will automatically set the image for the WCAImageView. If the completion block is not nil, this function will not assign the image directly and use the callback -- more suitable for re-use scenarios. This should be called on the main thread.
- (void)setImageWithURL:(NSURL * __nonnull)url mode:(UIViewContentMode)mode completion:(void (^ __nullable)(UIImage * __nullable, NSError * __nullable))completion;

/// Set the default place holder image, use this when there was a problem downloading or loading an image
- (void)setNoImage;

/// Cancel any pending image requests
- (void)cancelRequest;

/// Set image with a content mode. Does a cross fade animation by default
- (void)setImage:(UIImage * __nonnull)image mode:(UIViewContentMode)mode;
- (void)setup;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@end


@class UIGestureRecognizer;
@class WKWebView;
@class WKNavigation;
@class WKUserContentController;
@class WKScriptMessage;
@class YTPlayerView;


/// Plays content from a Video Card
SWIFT_CLASS("_TtC11WildcardSDK11WCVideoView")
@interface WCVideoView : UIView <WKNavigationDelegate, UIGestureRecognizerDelegate, WKScriptMessageHandler, YTPlayerViewDelegate>
@property (nonatomic) VideoCard * __nullable videoCard;
@property (nonatomic) id <WCVideoViewDelegate> __nullable delegate;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * __nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * __nonnull)otherGestureRecognizer;
- (void)webView:(WKWebView * __nonnull)webView didCommitNavigation:(WKNavigation * __null_unspecified)navigation;
- (void)webView:(WKWebView * __nonnull)webView didFinishNavigation:(WKNavigation * __null_unspecified)navigation;
- (void)webView:(WKWebView * __nonnull)webView didFailNavigation:(WKNavigation * __null_unspecified)navigation withError:(NSError * __nonnull)error;
- (void)webView:(WKWebView * __nonnull)webView didFailProvisionalNavigation:(WKNavigation * __null_unspecified)navigation withError:(NSError * __nonnull)error;
- (void)userContentController:(WKUserContentController * __nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * __nonnull)message;
- (void)playerView:(YTPlayerView * __null_unspecified)playerView receivedError:(YTPlayerError)error;
- (void)playerViewDidBecomeReady:(YTPlayerView * __null_unspecified)playerView;
- (void)playerView:(YTPlayerView * __null_unspecified)playerView didChangeToState:(YTPlayerState)state;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@end


@class NSOperationQueue;


/// Global convenience settings
SWIFT_CLASS("_TtC11WildcardSDK11WildcardSDK")
@interface WildcardSDK

/// Custom font for Card titles
+ (UIFont * __nonnull)cardTitleFont;
+ (void)setCardTitleFont:(UIFont * __nonnull)newValue;

/// Custom color for Card titles
+ (UIColor * __nonnull)cardTitleColor;
+ (void)setCardTitleColor:(UIColor * __nonnull)newValue;

/// Custom font for Card kickers
+ (UIFont * __nonnull)cardKickerFont;
+ (void)setCardKickerFont:(UIFont * __nonnull)newValue;

/// Custom color for Card kickers
+ (UIColor * __nonnull)cardKickerColor;
+ (void)setCardKickerColor:(UIColor * __nonnull)newValue;

/// Custom font for Card descriptions
+ (UIFont * __nonnull)cardDescriptionFont;
+ (void)setCardDescriptionFont:(UIFont * __nonnull)newValue;

/// Custom color for Card descriptions
+ (UIColor * __nonnull)cardDescriptionColor;
+ (void)setCardDescriptionColor:(UIColor * __nonnull)newValue;

/// Custom font for Card Action Buttons
+ (UIFont * __nonnull)cardActionButtonFont;
+ (void)setCardActionButtonFont:(UIFont * __nonnull)newValue;

/// Card Corner Radius
+ (CGFloat)cardCornerRadius;
+ (void)setCardCornerRadius:(CGFloat)newValue;

/// Delegate queue for network request callbacks
+ (NSOperationQueue * __nonnull)networkDelegateQueue;
+ (void)setNetworkDelegateQueue:(NSOperationQueue * __nonnull)newValue;

/// Custom corner radius for images shown in cards
+ (CGFloat)imageCornerRadius;
+ (void)setImageCornerRadius:(CGFloat)newValue;

/// This value is used to calculate a default preferred width for a CardView if none is explicilty given.
+ (CGFloat)defaultScreenMargin;
+ (void)setDefaultScreenMargin:(CGFloat)newValue;

/// The default background color for any card view
+ (UIColor * __nonnull)cardBackgroundColor;
+ (void)setCardBackgroundColor:(UIColor * __nonnull)newValue;

/// Enables or disables a drop shadow on the card view, ON by default
+ (BOOL)cardDropShadow;
+ (void)setCardDropShadow:(BOOL)newValue;

/// Initialize the SDK
+ (void)initializeWithApiKey:(NSString * __nonnull)key;
@end

#pragma clang diagnostic pop
